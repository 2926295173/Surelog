// This file is auto-generated by generate_ast_listener.py
// DO NOT EDIT

/*
 Copyright 2019 Alain Dargelas
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 *
 * File:   AstListener.h
 * Author: hs
 *
 */

#ifndef SURELOG_ASTLISTENER_H
#define SURELOG_ASTLISTENER_H
#pragma once

#include <Surelog/Common/NodeId.h>

#include <cstdint>
#include <type_traits>
#include <unordered_set>
#include <vector>

namespace SURELOG {

class AstListener;
class SymbolTable;
class VObject;
struct AstNodeEqualityComparer;
struct AstNodeHash;
struct AstNodeLessComparer;

class AstNode final {
 public:
  AstNode() : m_index(), m_object(nullptr) {}
  AstNode(const AstNode& node)
      : m_index(node.m_index), m_object(node.m_object) {}
  AstNode(const NodeId& index, const VObject* const object)
      : m_index(index), m_object(object) {}

  AstNode& operator=(const AstNode& rhs) {
    if (this != &rhs) {
      m_index = rhs.m_index;
      m_object = rhs.m_object;
    }
    return *this;
  }

 public:
  operator bool() const { return m_index && (m_object != nullptr); }

 private:
  NodeId m_index;
  const VObject* m_object = nullptr;

  friend class AstListener;
  friend struct AstNodeHash;
  friend struct AstNodeEqualityComparer;
  friend struct AstNodeLessComparer;
};

struct AstNodeEqualityComparer final {
  bool operator()(const AstNode& lhs, const AstNode& rhs) const {
    return (lhs.m_index == rhs.m_index) && (lhs.m_object == rhs.m_object);
  }
};

struct AstNodeHash final {
  size_t operator()(const AstNode& node) const {
    return std::hash<uint32_t>()(node.m_index);
  }
};

class AstListener {
 protected:
  typedef std::unordered_set<AstNode, AstNodeHash, AstNodeEqualityComparer>
      astnode_set_t;
  typedef std::vector<AstNode> astnode_stack_t;
  typedef std::vector<AstNode> astnode_vector_t;

 public:
  AstListener() = default;
  virtual ~AstListener() = default;

  virtual void enterSourceFile(const std::filesystem::path& filepath) {}
  virtual void leaveSourceFile(const std::filesystem::path& filepath) {}

  // clang-format off
<PUBLIC_ENTER_LEAVE_DECLARATIONS>
  // clang-format on

  void listen(const AstNode& node);
  void listenChildren(const AstNode& node);

  void listen(const std::filesystem::path& filepath, const VObject* objects,
              uint32_t count, const SymbolTable* symbolTable);

  bool getNodeName(const AstNode& node, std::string& name) const;
  bool getNodeFilePath(const AstNode& node,
                       std::filesystem::path& filepath) const;
  bool getNodeStartLine(const AstNode& node, int32_t& line) const;
  bool getNodeStartColumn(const AstNode& node, int32_t& column) const;
  bool getNodeEndLine(const AstNode& node, int32_t& line) const;
  bool getNodeEndColumn(const AstNode& node, int32_t& column) const;
  AstNode getNodeParent(const AstNode& node) const;
  void getChildren(const AstNode& node, bool ordered,
                   astnode_vector_t& children) const;
  void getSiblings(const AstNode& node, bool ordered,
                   astnode_vector_t& siblings) const;

 private:
  // clang-format off
<PRIVATE_LISTEN_DECLARATIONS>
  // clang-format on

 protected:
  astnode_set_t m_visited;
  astnode_stack_t m_callstack;

 private:
  const VObject* m_objects = nullptr;
  uint32_t m_count = 0;
  const SymbolTable* m_symbolTable = nullptr;
};
}  // namespace SURELOG

#endif  // SURELOG_ASTLISTENER_H
