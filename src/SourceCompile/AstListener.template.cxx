// This file is auto-generated by generate_ast_listener.py
// DO NOT EDIT

/*
 Copyright 2019 Alain Dargelas
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 *
 * File:   AstListener.cpp
 * Author: hs
 *
 */

#include <Surelog/Common/FileSystem.h>
#include <Surelog/Design/VObject.h>
#include <Surelog/SourceCompile/AstListener.h>
#include <Surelog/SourceCompile/SymbolTable.h>
#include <Surelog/SourceCompile/VObjectTypes.h>

#include <algorithm>

namespace SURELOG {
struct VObjectComparer final {
  bool operator()(const VObject& lhs, const VObject& rhs) const {
    // Sort top to bottom, left to right, outer to inner.
    // The first two conditions apply primarily to the start line/column
    // The last, outer to inner, applies to the end line/column
    // i.e. if two tokens share the same start line/column sort the outer
    // token ahead of the inner one.
    if (lhs.m_line != rhs.m_line) {
      return lhs.m_line < rhs.m_line;
    }
    if (lhs.m_column != rhs.m_column) {
      return lhs.m_column < rhs.m_column;
    }
    if (lhs.m_endLine != rhs.m_endLine) {
      return lhs.m_endLine > rhs.m_endLine;
    }
    if (lhs.m_endColumn != rhs.m_endColumn) {
      return lhs.m_endColumn > rhs.m_endColumn;
    }
    return false;
  }

  bool operator()(const NodeId& lhs, const NodeId& rhs) const {
    if (lhs == rhs) return false;
    return operator()(m_objects[(RawNodeId)lhs], m_objects[(RawNodeId)rhs]);
  }

  const VObject* const m_objects = nullptr;
  explicit VObjectComparer(const VObject* const objects) : m_objects(objects) {}
};

VObjectType AstListener::getNodeType(const AstNode& node) const {
  return node ? node.m_object->m_type : VObjectType::sl_INVALID_;
}

bool AstListener::getNodeName(const AstNode& node, std::string& name) const {
  if (node && node.m_object->m_name) {
    name = m_symbolTable->getSymbol(node.m_object->m_name);
    return true;
  }
  return false;
}

bool AstListener::getNodeFileId(const AstNode& node, PathId& fileId) const {
  if (node) {
    fileId = node.m_object->m_fileId;
    return true;
  }
  return false;
}

bool AstListener::getNodeLocation(const AstNode& node, int32_t& startLine,
                                  int32_t& startColumn, int32_t& endLine,
                                  int32_t& endColumn) const {
  if (node) {
    startLine = node.m_object->m_line;
    startColumn = node.m_object->m_column;
    endLine = node.m_object->m_endLine;
    endColumn = node.m_object->m_endColumn;
    return true;
  }
  return false;
}

bool AstListener::getNodeStartLocation(const AstNode& node, int32_t& line,
                                       int32_t& column) const {
  int32_t endLine = 0, endColumn = 0;
  return getNodeLocation(node, line, column, endLine, endColumn);
}

bool AstListener::getNodeEndLocation(const AstNode& node, int32_t& line,
                                     int32_t& column) const {
  int32_t startLine = 0, startColumn = 0;
  return getNodeLocation(node, startLine, startColumn, line, column);
}

AstNode AstListener::getNodeParent(const AstNode& node) const {
  if (node && node.m_object->m_parent) {
    return AstNode(node.m_object->m_parent,
                   &m_objects[(RawNodeId)node.m_object->m_parent]);
  }
  return AstNode();
}

bool AstListener::getNodeChildren(const AstNode& node, bool ordered,
                                  astnode_vector_t& children) const {
  if (!node) return false;
  if (!node.m_object->m_child) return true;

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = node.m_object->m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  children.reserve(children.size() + indexes.size());
  for (const NodeId& index : indexes) {
    children.emplace_back(index, &m_objects[(RawNodeId)index]);
  }

  return true;
}

AstNode AstListener::getNodePrevSibling(const AstNode& node) const {
  if (const AstNode parent = getNodeParent(node)) {
    astnode_vector_t children;
    if (getNodeChildren(parent, true, children)) {
      for (size_t i = 1, ni = children.size(); i < ni; ++i) {
        if (children[i].m_index == node.m_index) {
          return children[i - 1];
        }
      }
    }
  }
  return AstNode();
}

AstNode AstListener::getNodeNextSibling(const AstNode& node) const {
  if (const AstNode parent = getNodeParent(node)) {
    astnode_vector_t children;
    if (getNodeChildren(parent, true, children)) {
      for (size_t i = 0, ni = children.size() - 1; i < ni; ++i) {
        if (children[i].m_index == node.m_index) {
          return children[i + 1];
        }
      }
    }
  }
  return AstNode();
}

bool AstListener::getNodeSiblings(const AstNode& node, bool ordered,
                                  astnode_vector_t& siblings) const {
  if (!node) return false;
  if (!node.m_object->m_parent) return true;

  const VObject& parent = m_objects[(RawNodeId)node.m_object->m_parent];

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = parent.m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    if (id != node.m_index) indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  siblings.reserve(siblings.size() + indexes.size());
  for (const NodeId& index : indexes) {
    siblings.emplace_back(index, &m_objects[(RawNodeId)index]);
  }

  return true;
}

void AstListener::listen(PathId fileId,
                         const VObject* objects, uint32_t count,
                         const SymbolTable* symbolTable) {
  m_objects = objects;
  m_count = count;
  m_symbolTable = symbolTable;

  const AstNode root(NodeId(count - 1), &objects[count - 1]);

  enterSourceFile(fileId);
  listenChildren(root, true);
  leaveSourceFile(fileId);
}

void AstListener::listenChildren(const AstNode& node, bool ordered) {
  if (!node || !node.m_object->m_child) return;

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = node.m_object->m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  for (const NodeId& index : indexes) {
    const AstNode node(index, &m_objects[(RawNodeId)index]);
    listen(node);
  }
}

void AstListener::listenSiblings(const AstNode& node, bool ordered) {
  if (!node || !node.m_object->m_parent) return;

  const VObject& parent = m_objects[(RawNodeId)node.m_object->m_parent];

  std::vector<NodeId> indexes;
  indexes.reserve(16);
  for (NodeId id = parent.m_child; id;
       id = m_objects[(RawNodeId)id].m_sibling) {
    if (id != node.m_index) indexes.emplace_back(id);
  }

  if (ordered) {
    std::sort(indexes.begin(), indexes.end(), VObjectComparer(m_objects));
  }

  for (const NodeId& index : indexes) {
    const AstNode node(index, &m_objects[(RawNodeId)index]);
    listen(node);
  }
}

// clang-format off
<PRIVATE_LISTEN_IMPLEMENTATIONS>
// clang-format on

void AstListener::listen(const AstNode& node) {
  if (!m_visited.insert(node).second) {
    return;
  }

  m_callstack.emplace_back(node);
  // clang-format off
  switch (node.m_object->m_type) {
<LISTEN_CASE_STATEMENTS>
    default: break;
  };
  // clang-format on
  m_callstack.pop_back();
}
}  // namespace SURELOG
